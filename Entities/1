import pygame
from Utils.States import AnimatedState, StaticState

class GameEntity(pygame.sprite.Sprite):
    def __init__(self, display):
        super(GameEntity, self).__init__()

        self.display = display
        self.states_dict = {}
        self.current_state = None
        self.dx = 0
        self.dy = 0
        self.image = None

    def set_current_state(self, key):
        self.current_state = self.states_dict[key]

    def impulse(self, dx, dy):
        self.dx = dx
        self.dy = dy


    def update(self, dt):
        raise NotImplementedError("The update method must be called in any child class")

class Character(GameEntity):
    def __init__(self, display, px, py):
        super(Character, self).__init__(display)

        self.speed = 3

        self.walking_images = pygame.image.load('assets/images/p1_walk_animation.png')

        self.walking_right_state = AnimatedState(self.walking_images.subsurface(0,0,
                                                 self.walking_images.get_width(),
                                                 self.walking_images.get_height()/2),
                                                 4, 400, "walking_right")
        self.walking_left_state = AnimatedState(self.walking_images.subsurface(0,
                                                self.walking_images.get_height()/2,
                                                self.walking_images.get_width(),
                                                self.walking_images.get_height()/2),
                                                4, 400, "walking_left")

        self.resting_left_state = StaticState(self.walking_images.subsurface(
                                              self.walking_images.get_width()*3/4,
                                              self.walking_images.get_height()/2,
                                              self.walking_images.get_width()/4,
                                              self.walking_images.get_height()/2),
                                               "resting_left")
        self.resting_right_state = StaticState(self.walking_images.subsurface(0,0,
                                               self.walking_images.get_width()/4,
                                               self.walking_images.get_height()/2),
                                               "resting_right")

        self.states_dict["walking_right"] = self.walking_right_state
        self.states_dict["walking_left"] = self.walking_left_state
        self.states_dict["resting_left"] = self.resting_left_state
        self.states_dict["resting_right"] = self.resting_right_state

        self.set_current_state("resting_left")
        self.image = self.current_state.get_sprite()
        self.rect = self.image.get_rect()
        self.rect.x = px
        self.rect.y = py

    def calculate_gravity(self):
        if self.dy == 0:
            self.dy = 1
        else:
            self.dy = self.dy + 0.35

    def key_down(self, key):
        if key.key == pygame.K_UP:
            pass
        if key.key == pygame.K_DOWN:
            pass
        if key.key == pygame.K_LEFT:
            pass
        if key.key == pygame.K_RIGHT:
            pass
    
    def key_up(self, key):
        if key.key == pygame.K_UP:
            pass
        if key.key == pygame.K_DOWN:
            pass
        if key.key == pygame.K_LEFT:
            pass
        if key.key == pygame.K_RIGHT:
            pass

    def update(self, dt):
        self.calculate_gravity()

        self.rect.x = self.rect.x + self.dx
        self.rect.y = self.rect.y + self.dy

        if self.rect.y+self.current_state.get_height() > self.display.get_height():
            self.rect.y = self.display.get_height()-self.current_state.get_height()
            self.dy = 0

        self.current_state.update(dt)
        self.image = self.current_state.get_sprite()

